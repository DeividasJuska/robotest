{"version":3,"sources":["containers/PopArt-Regular.ttf","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","reportWebVitals.js","index.js"],"names":["module","exports","__webpack_require__","p","Card","_ref","name","email","id","React","createElement","className","alt","src","concat","CardList","robots","map","user","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","_Component","_this","_classCallCheck","this","_possibleConstructorReturn","_getPrototypeOf","call","state","hasError","_inherits","_createClass","value","error","info","setState","Component","App","_React$Component","onSearchChange","event","searchfield","target","_this2","fetch","then","response","json","users","_this$state","filteredRobots","filter","robot","toLowerCase","includes","lenght","reportWebVitals","onPerfEntry","Function","e","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.909559f7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/PopArt-Regular.d358c034.ttf\";","import React from 'react';\r\n\r\nconst Card = ({ name, email, id }) => {\r\n    return (\r\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img alt='photo' src={`https://robohash.org/${id}?200x200`} />\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n    return (\r\n        <div>\r\n                {\r\n                    robots.map((user, i) => {\r\n                    return  (\r\n                <Card\r\n                    key={i} \r\n                    id={robots[i].id} \r\n                    name={robots[i].name} \r\n                    email={robots[i].email}\r\n                />\r\n                );\r\n            })\r\n        }\r\n    </div>\r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchChange}) => {\r\n    return (\r\n        <div className='pa2'>\r\n        <input\r\n            className='tc pa3 ba b--green bg-lightest-blue'\r\n            type='search' \r\n            placeholder='Search Robots'\r\n            onChange={searchChange}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{ overflowY: 'scroll', border: '3px solid black', height: '500px'}}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info) {\r\n        this.setState({ hasError: true })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError) {\r\n            return <h1>Oops. That's not good</h1>\r\n        }\r\n        return this.props.children \r\n    }\r\n}\r\n\r\nexport default ErrorBoundry;","import React, { Component } from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundry from '../components/ErrorBoundry';\r\nimport  './App.css';\r\n\r\nclass App extends React.Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            robots: [],\r\n            searchfield: ''\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response=> response.json())\r\n        .then(users => this.setState({ robots: users}));\r\n    }\r\n\r\n    onSearchChange = (event) => {\r\n        this.setState({ searchfield: event.target.value })\r\n       \r\n    }\r\n\r\n    render() {\r\n        const { robots , searchfield } = this.state;\r\n        const filteredRobots = robots.filter(robot =>{\r\n            return robot.name.toLowerCase().includes(searchfield.toLowerCase())\r\n        })\r\n        if (robots.lenght) {\r\n            return <h1>Loading</h1>\r\n        } else {\r\n        }\r\n        return (\r\n            <div className='tc'>\r\n                <h1 className='f1'>RoboFriends</h1>\r\n                <SearchBox searchChange={this.onSearchChange} />\r\n                <Scroll>\r\n                    <ErrorBoundry>\r\n                    <CardList robots={filteredRobots}/>\r\n                    </ErrorBoundry>\r\n                </Scroll>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './containers/App';\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\nimport './containers/PopArt-Regular.ttf'\n\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}